TreiPigMei Chess Engine
===============================================================

Team: - Florin-George Boștinaru
      - Alexandru Marian Grigoroiu
      - Remus Mazilu
      - Andreea Meiroșu (captain)
      
===============================================================
      
Engine:

  To represent pieces we created an abstract class named Piece and then for each type we extended this class and
set two vectors for each possible move of that piece type.

  The Board is a 8x8 matrix of pieces which uses a singleton pattern because we want to use the same board in every class
which needs the board.

  We start to move a pawn from column “a” until it can’t move anymore from different reasons: there is a piece in front
of it and the pawn cannot attack in front or the pawn is taken by one of the adversary pieces. In case we have the 
possibility to attack with the pawn, we attack and then continue to move forward. 

  The protocol is implemented in ChessBoardConnect class. It establishes the connection between our engine and the board's 
engine, taking commands from System.in.

  It interprets every command given by XBoard as follows:

  New: 
  -  Creates a new instance of the board, setting all pieces on their starting positions.
  -  In case there wasn't any other white or black command stated, the default colour for our engine is black.
  Afterwards, it waits for a move command.
  -  Resets force mode
  
  Protover 2:
  -  Sends our desired settings for the current connection
  
  Force:
  -  Sets force mode
  
  Go:
  -  Resets force mode
  
  White/Black:
  -  Sets the engine's colour respectively
  
  Quit:
  -  Calls Systme. exit()
  
  Resign:
  -  Prints the score and the colour that stated the resign
  
  
  If none of the commands stated above were read from the input we assume that there was a move command stated.
It applies a regex pattern on the input and if it matches, the engine verifies if it is a legal move. It
then prints a valid move or "resign" if there is no valid move left.


===============================================================


Obtain the .jar file and the docs:
  - Run ant on build.xml which is located in the root directory
  - The jar file will be created in the jar folder
  - The Javadoc docs will be generated in the doc folder
  
